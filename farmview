#!/usr/bin/perl
#    This file is part of IFMI PoolManager.	It is derived from mgpumon.
#
#    PoolManager is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#

use IO::Select;
use IO::Socket::INET;
use JSON::XS;

require '/opt/ifmi/pm-common.pl';

my $conf = &getConfig;
%conf = %{$conf};

my $config = { debug=>0, 
genhttp_last => 0, genhttp_interval => 30, genhttp_minwait => 5, httpdir => '/var/www/', 
httpindex => 'farmview.html', httpimgpath => '/IFMI', httpcss =>'/IFMI/themes/' . $conf{display}{farmview_css}};


use Proc::PID::File;

if (Proc::PID::File->running())
{
        # one at a time, gentlemen
	print "Another farmview is already running.\n";
        exit(0);
}

our %miners;

if (${$conf}{nodes})
{
	my @nodes = @{${$conf}{nodes}};
	
	for (my $i = 0; $i < @nodes; $i++)
	{
		if (${$config}{debug})
		{
			print "add static node " . $nodes[$i] . "\n";
		}
		
		$miners{$nodes[$i]}{id} = $nodes[$i];
		$miners{$nodes[$i]}{loc} = 'Unheard static entries';
		$miners{$nodes[$i]}{update} = time;
	}
}


our $mode = 0;
our $lasttime = time() + 30;
our $packets = 0;
our $refreshedpackets = 0;
our $seendata = 0;
our $starttime = time;

my $last_minerid = "";
my $last_minedip = "";

my $listenport = 54545;
if (defined($conf{farmview}{listen_port})) {
  $listenport = $conf{farmview}{listen_port};
}
my $socket = IO::Socket::INET->new(Proto => 'udp', Type => SOCK_DGRAM, 
LocalPort => $listenport, Blocking  => 0) 
or die "Cannot open socket. Please stop mgpumon or move Farmview to another port.";

$sel = IO::Select->new();
$sel->add($socket);


while($socket)
{

 while(@ready = $sel->can_read(0))
 {
   foreach $fh (@ready) 
   {
     my $ip = $socket->recv(my $data, 8000);
     my ($port, $ipaddr) = sockaddr_in($socket->peername);
     my $host = inet_ntoa($ipaddr);
     
     $packets++;
     
     if ($data =~ m/^(.*?)\|(.*?)\|(.*)$/)
     {
      $last_minerid = $1;
      $last_minerip = $host;

      if (${$config}{debug})
      {
     	 print "recv packet from $host:$port ($1)\n";
      }
      
      updateMiner($host,$1,$2,$3);
     }
     
   }

 }

 my $timesince = (time - ${$config}{genhttp_last});
 
 if ( ($timesince > ${$config}{genhttp_interval}) 
 	|| ($packets && (!$seendata)) 
 	|| ( ($timesince > ${$config}{genhttp_minwait}) && ($packets > $refreshedpackets) ) )
 {
 	 &genhttp;
 	 ${$config}{genhttp_last} = time;
 	 $refreshedpackets = $packets;
 }
 
 if ((!$seendata) && ($packets))
 {
 	 $seendata = 1;
 }
 sleep(2);
}


sub genhttp
{
	
	if (! -e ${$config}{httpdir})
	{
		mkdir ${$config}{httpdir}, 0777 or die("Cannot create htmldir");	
		
		if (${$config}{debug})
		{
			print "genhttp created httpdir " . ${$config}{httpdir} . "\n";
		}
		
	}
	
	my $html = "";
	
	my $tothash = 0;
	my $totaccept = 0;
	my $totinvalid = 0;
	
	my $totproblems = 0;
	my $problemgpus = 0;
	my $okgpus = 0;
	my $problemnodes = 0;
	my $oknodes = 0;
	
	if (keys %miners)
	{
			
		$html .= "<div id='content' class='farm'><TABLE>";

		$html .= "<tr><td class='refreshtime'>";
		use POSIX qw(strftime);
		$now = POSIX::strftime( "%A, %T %Z", localtime());			 
		$html .= "<p>Last refresh: $now</p>";
		$html .= "</td></tr>";
		
		# sort by loc..
		my %locs;
		
		foreach $miner (sort keys %miners)
		{
			my $lk = $miners{$miner}{loc};
			
			push( @{ $locs{$lk} }, $miner);
		
		}
	
		foreach $loc (sort keys %locs)
		{
		
		 $lochash = 0;
		 $locaccept = 0;
		 $locinvalid = 0;
		 $locgpus = 0;
		 $locpools = 0;
		 $locsummary = 0; 
		 $locproblems = 0;
		 $locnodes = 0;
		 $locpools = 0; 
		 $locversion = 0; 
		
		 $nhtml = "";
		 
		 foreach $miner (@{ $locs{$loc} })
		 {
		  
			my @gpus;
			my @pools;
			my @summary;
			my $version; 
			my @nodemsg;

			my $minerhash = 0; 
			my $res = $miners{$miner}{gpus};
  
			$locnodes++;
			
			while ( $res =~ m/(\d+?)\:(\{.+?\})/g)
			{
				$locgpus++;
				push(@gpus, decode_json $2);
			}
			
			while ( $res =~ m/(\d+?)\spool\:(\{.+?\})/g)
			{
				$locpools++;
				push(@pools, decode_json $2);
			}

			while ( $res =~ m/sum\:(\{.+?\})/g)
			{
				push(@summary, decode_json $1);
			}

			while ( $res =~ m/ver\:(.+?)\|/g)
			{
				$version = $1
			}

			my $statclass = 'node';
			my $problems = 0;
			my $checkin = (time() - $miners{$miner}{update});
			
			if ($checkin > 65)
			{
				my $missed = int($checkin/60);
				$problems++;
				undef @pools;
				undef @summary;
				undef @gpus; 
				push(@nodemsg, "Missed $missed update");
				if ($missed > 1)
				{
					$nodemsg[@nodemsg-1] .= "s";
				}
				
			}			

			my $sput = ""; 
			$sput .= "<div class='data'><TABLE><TR class='header'>";
			$sput .= "<TD class='header'>Node</TD>";
			$sput .= "<TD class='header'>IP</TD>";
			$sput .= "<TD class='header'>Version</TD>";
			$sput .= "<TD class='header'>Runtime</TD>";
			$sput .= "<TD class='header'>Hashrate</TD>";
			$sput .= "<TD class='header'>WU</TD>";
			$sput .= "<TD class='header'>Rej</TD>";
			$sput .= "<TD class='header'>HW</TD>";
			$sput .= "<TD class='header'>Pools</TD>";
			$sput .= "<TD class='header'>Active Pool</TD>";
			$sput .= "<TD class='header'>ID</TD>";
			$sput .= "<TD class='header'>Worker</TD>";
			$sput .= "<TD class='header'>Status</TD>";
			$sput .= "<TD class='header' colspan=2>Accept/Reject</TD>";
			$sput .= "</TR><TR class='sumdata'><td class='sumhdr'>";

			if ($miner eq $miners{$miner}{id}) 
			{
				$iptxt = "Never heard";
				$sput .= $miners{$miner}{id};
			}
			else
			{
				if ($miner =~ m/^(.+)\|(.+)$/)
				{
					$iptxt = $1;
					$sput .= "<A href=http://$iptxt/cgi-bin/status.pl>" . $miners{$miner}{id} . "</a>";			
				}
			}
			$sput .= '</td><td><A href=ssh://user@' . $iptxt . '>' . $iptxt . '</a></td>';

			if ($version =~ m/(\w+?)=(\d+\.\d+\.\d+),API=(\d+\.\d+)/) {
				$mname = $1;
			  	$mvers = $2; 
			  	$avers = $3; 
				$sput .= "<td>$mname $mvers</td>";
			} else {
				$sput .= "<td>unknown</td>";
			}

			if (@summary)
			{
				my $mrt = 0; 
				for (my $i=0;$i<@summary;$i++) {
					$mrt = ${@summary[$i]}{'elapsed'};
					$mmhs = ${@summary[$i]}{'hashavg'} . " Mh/s";
					$mwu = ${@summary[$i]}{'work_utility'};
					$macc = ${@summary[$i]}{'shares_accepted'};
					$mrej = ${@summary[$i]}{'shares_invalid'};
					$mrat =  sprintf("%.3f%%", $mrej / ($macc + $mrej)*100);
					$mhwe = ${@summary[$i]}{'hardware_errors'};
				}

				if ($mrt > 0) {
				  $mrth = sprintf("%dd %02d:%02d.%02d",(gmtime $mrt)[7,2,1,0]);
				  $minert = "<td>" . $mrth . "</td>";
				} else {
				  $problems++;
				  push(@nodemsg, "Miner Stopped");
				  $minert = "<td class='error'>stopped</td>";
				}
				$sput .= $minert;
				
				$sput .= "<td>" . $mmhs . "</td>";
				$sput .= "<td>" . $mwu . "</td>";
				$sput .= "<td>" . $mrat . "</td>";

				if ($mhwe > 0) {
				  $problems++;
				  push(@nodemsg, "Hardware Errors");
				  $minerhwe = "<td class='error'>" . $mhwe . "</td>";
				} else {
				  $minerhwe = "<td>" . $mhwe . "</td>";
				}
				$sput .= $minerhwe ;
			
			} else { 
				$sput .= "<td colspan=5>Summary Not Available</td>";
			}

			if (@pools)
			{
		  		my $g0url = $gpus[0]{'pool_url'};
			    for (my $i=0;$i<@pools;$i++) {
				    my $pmatch = ${@pools[$i]}{'url'};
				    if ($pmatch eq $g0url) {
					    $pname = ${@pools[$i]}{'url'};
				    	$poid = ${@pools[$i]}{'poolid'}; 
					    $pusr = ${@pools[$i]}{'user'};
					    $pstat = ${@pools[$i]}{'status'};
					    if ($pstat eq "Dead") {
					      $problems++;
					      push(@nodemsg, "Active pool is dead");
					      $pstatus = "<td class='error'>" . $pstat . "</td>"
					    } else {
					      $pstatus = "<td>" . $pstat . "</td>";
					    }
					    $pacc = ${@pools[$i]}{'accepted'};
					    $prej = ${@pools[$i]}{'rejected'};
					    if ($prej ne "0") {
					        $prr = sprintf("%.2f", $prej / ($pacc + $prej)*100);
					    } else {
					        $prr = "0.0";
					    }
					    if ($prr > ${$conf}{monitoring}{monitor_reject_hi}) {
					    	$problems++;
					    	push(@nodemsg, "Active pool reject ratio high");
					        $prat = "<td class='error'>" . $prr . "%</td>";
					    } else {
					        $prat = "<td>" . $prr . "%</td>";
					    }
	      			}
	      		}

			    $sput .= "<td>" . (@pools) . "</td>";
			    $sput .= "<td>" . $pname . "</td>";
			    $sput .= "<td>" . $poid . "</td>";
			    if (length($pusr) > 20) {
			        $pusr = substr($pusr, 0, 6) . " ... " . substr($pusr, -6, 6) if (index($pusr, '.') < 0);
			    }
			    $sput .= "<td>" . $pusr . "</td>";
			    $sput .= $pstatus;
			    $sput .= "<td>" . $pacc . " / " . $prej . "</td>";
			    $sput .= $prat;
			    $sput .= "</tr></table>";      

			} else { 
				$sput .= "<td colspan=7>Pool Info Not Available</td></tr></table>";
   			}

   			my $ghput = ""; 
			$ghput .= "<table><TR class='header'>";
			$ghput .= "<TD class='header'>Messages</TD>";
			$ghput .= "<TD class='header'>GPUs</TD>";
			$ghput .= "<TD class='header'>  </TD>" if (@gpus < 1); 

			my $g = 0; 
			while ($g < @gpus) { 
				$ghput .= "<TD class='header'>temp $g</TD>";
				$g++
			}
			my $g = 0; 
			while ($g < @gpus) { 
				$ghput .= "<TD class='header'>fan $g</TD>";
				$g++
			}				
			my $g = 0; 
			while ($g < @gpus) { 	
				$ghput .= "<TD class='header'>hash $g</TD>";
				$g++
			}
			my $g = 0; 
			while ($g < @gpus) { 
				$ghput .= "<TD class='header'>rej $g</TD>";
				$g++
			}
			$ghput .= "</tr>";

			my $gput = ""; 
			if (@gpus)
			{				
				for (my $i = 0; $i < @gpus;$i++)
				{
					$gproblem{$i} = 0; 	
 					if ($gpus[$i]{'current_temp_0_c'} > $conf{monitoring}{monitor_temp_hi})
					{
						$gpuid = $i; 
						$gproblem{$gpuid}++;
						$problems++;
						push(@nodemsg, "GPU $i is over maximum temp");
						
						$gput .= "<td class='error'>";
					}
					elsif ($gpus[$i]{'current_temp_0_c'} < $conf{monitoring}{monitor_temp_lo})
					{
						$gpuid = $i; 
						$gproblem{$gpuid}++;
						$problems++;
						push(@nodemsg, "GPU $i is below minimum temp");
						
						$gput .= "<td class='error'>";
					}
					else
					{
						$gput .= '<td>';
					}
				
					$gput .= sprintf("%.1f", $gpus[$i]{'current_temp_0_c'}) . 'C </TD>';

				}

				for (my $i = 0; $i < @gpus;$i++)
				{
					if (($gpus[$i]{'fan_rpm_c'} < $conf{monitoring}{monitor_fan_lo}) 
						&& (! $gpus[$i]{'fan_rpm_c'} eq '0'))
					{
						$gpuid = $i; 
						$gproblem{$gpuid}++;
						$problems++;
						push(@nodemsg, "GPU $i is below minimum fan rpm");
						$gput .= "<td class='error'>";
					}
					else
					{
						$gput .= '<td>';
					}
						
					$gput .= $gpus[$i]{'fan_speed_c'} . '% </TD>';

				}

				for (my $i = 0; $i < @gpus;$i++)
				{
					if ($gpus[$i]{'hashrate'} < $conf{monitoring}{monitor_hash_lo})
					{
						$gpuid = $i; 
						$gproblem{$gpuid}++;
						$problems++;
						push(@nodemsg, "GPU $i is below minimum hash rate");
						$gput .= "<td class='error'>";
					}
					else
					{
						$gput .= '<td>';
					}					
					$gput .= $gpus[$i]{'hashrate'};

					$gput .= '</TD>';
				
					$tothash += $gpus[$i]{'hashrate'};
					$lochash += $gpus[$i]{'hashrate'};
					$minerhash += $gpus[$i]{'hashrate'};
										
				}	

				for (my $i = 0; $i < @gpus;$i++)
				{
					if ($gpus[$i]{'shares_accepted'} > 0)
					{
						my $rr = $gpus[$i]{'shares_invalid'}/($gpus[$i]{'shares_accepted'} 
							+ $gpus[$i]{'shares_invalid'})*100 ;
						
						if ($rr > $conf{monitoring}{monitor_reject_hi})
						{
						$gpuid = $i; 
						$gproblem{$gpuid}++;
					    $problems++;
							push(@nodemsg, "GPU $i is above maximum reject rate");
							$gput .= "<td class='error'>";
						}
						else
						{
							$gput .= '<td>';
						}
						
						$gput .= sprintf("%-2.2f%", $rr);

						$totaccept += $gpus[$i]{'shares_accepted'};
						$totinvalid += $gpus[$i]{'shares_invalid'};
						$locaccept += $gpus[$i]{'shares_accepted'};
						$locinvalid += $gpus[$i]{'shares_invalid'};

					}
					else
					{
						$gput .= '<td>N/A';
					}
					
					$gput .= "</TD>";

				}

				$gput .= "</tr></table>";

				for (my $i = 0; $i < @gpus;$i++) 
				{
					if ($gproblem{$i} > 0) {
					 $problemgpus++
					} else {
					 $okgpus++
					} 
				}
			
			}
			else
			{
				$gput .= "<td >No GPU data is available</td></tr>";
			}

			my $simg = ${$config}{httpimgpath} . '/';
			if ($problems)
			{
				$totproblems += $problems;
				$locproblems += $problems;
				if ($checkin > 65)
				{
#					$simg .= 'network-error.png';
					$simg .= 'alarm16.png';
				}
				else
				{
					$simg .= 'error16.png';
				}					
				$problemnodes++;
			}
			else
			{
				$oknodes++;
				$simg .= 'ok16.png';
			}

			my $mput = ""; 
			$mput .= "<tr class='sumdata'><td class='sumhdr'><img src='$simg'> ";

			if (@nodemsg)
			{					
				if (@nodemsg == 1) 
				{
					$mput .= $nodemsg[0] . "</td>";
				} else {
					$mput .= " Multiple Problems</td>";
				}
			} else { 
				$mput .= " No problems reported</td>";
			}

			$mput .= "<td>" . (@gpus) . "</td>";

# Node HTML starts here	
			
			$nhtml .= "<tr><TD class='$statclass' style='padding: 5px;'>";
			$nhtml .= $sput;	
			$nhtml .= $ghput;	
		    $nhtml .= $mput . $gput;
#		    $nhtml .= "</table>";

# Location HTML starts here		
		 }
		 $html .= "<TR><TD class='locsum'>";
			 
		 $html .= "<p>$loc - ";
		 $html .= sprintf("%.2f Mh/s",$lochash / 1000); 
		 $html .= "<br> $locnodes node"; 

		 if ($locnodes != 1)
		 {
			 $html .= 's';
		 }
			
		 $html .= ' and ' . $locgpus . ' GPU';
		 if ($locgpus != 1)
		 {
			 $html .= 's';
		 }
			 
		 if ($locproblems)
		 {
		 	 $html .= ', ' . $locproblems . ' problem';
		 	 if ($locproblems != 1)
		 	 {
		 	 	 $html .= 's';
		 	 }
		 }
			 
		 $html .= '</p></TD></TR>';

		 $html .= $nhtml;
		  
		}
		
		$html .= "</TABLE></div>";
	}
	else
	{
		$html .= "<div id='waiting'><h1>Waiting for miner data...</H1><P>&nbsp;<P>";
		
		$html .= "It can take up to 60 seconds for miner data to appear. ";
		$html .= "If no data appears after a full minute, you may need to check your miner's configuration.<p>";
		$html .= "<b>This FarmView is listening for UDP packets on port $listenport<p>";
		my @ips = &getIPs;
				
		if (@ips)
		{
			if (@ips > 1)
			{
				$html .= "This machine has multiple active network interfaces:<P>";
				for ($i = 0;$i < @ips;$i++)
				{
					$html .= @ips[$i] . "<br>";
				}
			}
			else
			{
				$html .= "This machine's IP address is " . @ips[0]; 
			}
		}
		else
		{
			$html .= "There don't seem to be any network interfaces (besides localhost) active.  Only status from the local machine can be seen.";
		}
		
		$html .= "</b><P>";
		$html .= "Your miners should either be set to broadcast status (the preferred method, but only works if FarmView is running on same network as miners) ";
		$html .= "or they should be set to direct their status to the machine Farmview is running on.</P>";

	}	
	$html .= "</BODY></HTML>";
	
	
	my $head = "<HTML><HEAD>";
	if (keys %miners)
	{
		$head .= "<meta http-equiv=\"refresh\" content=\"" . ${$config}{genhttp_interval} . "\">";
	}
	else
	{
		# fast refresh till data heard
		$head .= "<meta http-equiv=\"refresh\" content=5>";
	}
	if (${$config}{httpcss})
	{
		$head .= "<LINK rel=\"stylesheet\" href=\"" . ${$config}{httpcss} . "\" type=\"text/css\">";
	}
	$head .= "<TITLE>IFMI PoolManager - FarmView</TITLE>";
	$head .= "</HEAD><BODY>";
	
	# overview
	
	$head .= "<div id='overview'>";
	$head .= "<table><TR>";	
	$head .= "<TD id='overviewlogo' rowspan=2><IMG src='" . ${$config}{httpimgpath} . "/IFMI-logo-small.png'></TD>" ;	
	$head .= "<td><table><tr><TD>Farm hashrate:</td></tr>";
	$head .= "<tr><TD class='overviewhash'>";
	$head .= sprintf("%.2f", $tothash / 1000 ) . " Mh/s</TD></tr></table></td>";
	$head .= "<TD class='overviewshares'>";
	$head .= $totaccept . " total accepted shares<br>";
	$head .= $totinvalid . " total invalid shares<br>";
	if ($totaccept)
	{
		$head .= sprintf("%.3f%%", $totinvalid / ($totaccept + $totinvalid)*100);
		$head .= " farm wide reject ratio";
	}	
    $head .= "</TD>";
    $head .= "<TD id='overviewnodes'>";    
    $head .= ($oknodes + $problemnodes) . " node";
    if (($oknodes + $problemnodes) != 1)
    {
    	$head .= 's';
    }
    $head .= " and " . ($okgpus + $problemgpus) . " GPU";
    if (($okgpus + $problemgpus) != 1)
    {
    	$head .= 's';
    }
    $head .= " in farm<br>";   
    $head .= $oknodes . " node";
    if ($oknodes == 1)
    {
    	$head .= ' is OK<br>';
    }
    else
    {
     $head .= 's are OK<br>';
    }    
    $head .= $problemnodes . " node";
    if ($problemnodes == 1)
    {
    	$head .= ' has errors<br>';
    }
    else
    {
     $head .= 's have errors<br>';
    }    
    $head .= "</TD>";    
    $head .= "<TD id='overviewgpus'>";
    $head .= $okgpus . " GPU";
    if ($okgpus == 1)
    {
    	$head .= ' is';
    }
    else
    {
    	$head .= 's are';
    }    
    $head .= " working fine<br>";    
    $head .= $problemgpus . " GPU";
    if ($problemgpus == 1)
    {
      $head .= ' has';
    }
    else
    { 
      $head .= 's have'; 
    }
    $head .= " issues<br>";    
    $head .= $totproblems . " problem";
    if ($totproblems != 1)
    {
    	$head .= 's';
    }
    $head .= " in the farm";    
    $head .= "</TD>";   
	$head .= "</TR></TABLE>";
	$head .= "</div>";

	open(FH,">" . ${$config}{httpdir} . '/' . ${$config}{httpindex}) or die("Cannot open httpindex for writing");
	print FH $head;
	print FH $html;
	close(FH);
	
	if (${$config}{debug})
	{
		print "genhttp wrote " . ${$config}{httpdir} . '/' . ${$config}{httpindex} . "\n";
	}
	
}


sub updateMiner
{
 my ($host,$mid,$mloc,$res) = @_;
 
 if (defined($miners{$host . '|' . $mid}))
 {
  # existing miner
   $miners{$host . '|' . $mid}{lastgpus} =  $miners{$host . '|' . $mid}{gpus};
 }
 else
 {
 	# check for predefined by minerid
 	if (defined($miners{$mid}))
 	{
 		# static entry, delete placeholder
 		delete $miners{$mid};
 		
 		if (${$config}{debug})
 		{
 			print "first status from static node '" . $mid . "' at $host\n";
 		}
 	}
 	elsif (defined($miners{$host}))
 	{
 		# static entry for ip, delete placeholder first time
 		delete $miners{$host};
 		
 		if (${$config}{debug})
 		{
 			print "first status from static node (ip) '" . $mid . "' at $host\n";
 		}
 	}
 	else
 	{
 		#dynamic entry
 		if (${$config}{debug})
 		{
 			print "first status from new dynamic node '" . $mid . "' at $host\n";
 		}
 	}
 }

 $miners{$host . '|' . $mid}{id} = $mid;
 $miners{$host . '|' . $mid}{loc} = $mloc;
 $miners{$host . '|' . $mid}{gpus} = $res; 
 $miners{$host . '|' . $mid}{update} = time(); 
}


sub getIPs
{
  my %ips;
  my $interface;
  my @res;
  
 foreach ( qx{ (LC_ALL=C /sbin/ifconfig -a 2>&1) } ) 
 {
  $interface = $1 if /^(\S+?):?\s/;
  next unless defined $interface;
  $ips{$interface}->{STATE}=uc($1) if /\b(up|down)\b/i;
  $ips{$interface}->{IP}=$1 if /inet\D+(\d+\.\d+\.\d+\.\d+)/i;
 }

 for my $int ( keys %ips )
 {
	if (( $ips{$int}->{STATE} eq "UP" ) && defined($ips{$int}->{IP}) && !($int eq "lo"))
	{
		push(@res, $ips{$int}->{IP});
	}
 }
 
 return(@res);
}

